#!/bin/bash

# =============================================================================
# VIRTUAL CPU SUPPORT MODULE - AUTO INSTALL FOR ALL PLATFORMS
# =============================================================================

detect_virtualization_platform() {
    echo "🔍 Detecting Virtualization Platform..."
    
    # Google Cloud Platform Detection
    if curl -s -f -m 5 http://metadata.google.internal/computeMetadata/v1/ -H "Metadata-Flavor: Google" >/dev/null 2>&1; then
        echo "✓ Platform: Google Cloud Platform (GCP)"
        PLATFORM="gcp"
        return 0
    fi

    # AWS Detection
    if curl -s -f -m 5 http://169.254.169.254/latest/meta-data/ >/dev/null 2>&1; then
        echo "✓ Platform: Amazon Web Services (AWS)"
        PLATFORM="aws"
        return 0
    fi

    # Azure Detection
    if curl -s -f -m 5 -H "Metadata: true" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" >/dev/null 2>&1; then
        echo "✓ Platform: Microsoft Azure"
        PLATFORM="azure"
        return 0
    fi

    # Oracle Cloud Detection
    if curl -s -f -m 5 http://169.254.169.254/opc/v1/instance/ >/dev/null 2>&1; then
        echo "✓ Platform: Oracle Cloud"
        PLATFORM="oracle"
        return 0
    fi

    # DigitalOcean Detection
    if curl -s -f -m 5 http://169.254.169.254/metadata/v1/id >/dev/null 2>&1; then
        echo "✓ Platform: DigitalOcean"
        PLATFORM="digitalocean"
        return 0
    fi

    # VMWare Detection
    if dmidecode -s system-manufacturer 2>/dev/null | grep -qi "vmware"; then
        echo "✓ Platform: VMWare"
        PLATFORM="vmware"
        return 0
    fi

    # VirtualBox Detection
    if dmidecode -s system-product-name 2>/dev/null | grep -qi "virtualbox"; then
        echo "✓ Platform: VirtualBox"
        PLATFORM="virtualbox"
        return 0
    fi

    # KVM Detection
    if dmidecode -s system-product-name 2>/dev/null | grep -qi "kvm"; then
        echo "✓ Platform: KVM"
        PLATFORM="kvm"
        return 0
    fi

    # Hyper-V Detection
    if dmidecode -s system-manufacturer 2>/dev/null | grep -qi "microsoft"; then
        echo "✓ Platform: Hyper-V"
        PLATFORM="hyperv"
        return 0
    fi

    # Docker Container Detection
    if grep -q docker /proc/1/cgroup 2>/dev/null; then
        echo "✓ Platform: Docker Container"
        PLATFORM="docker"
        return 0
    fi

    # LXC Container Detection
    if grep -q lxc /proc/1/cgroup 2>/dev/null; then
        echo "✓ Platform: LXC Container"
        PLATFORM="lxc"
        return 0
    fi

    # Generic Virtualization Detection
    if lscpu 2>/dev/null | grep -qi "hypervisor"; then
        echo "✓ Platform: Generic Virtualized Environment"
        PLATFORM="generic"
        return 0
    fi

    # Physical Machine (fallback)
    echo "✓ Platform: Physical Machine/Bare Metal"
    PLATFORM="physical"
    return 0
}

install_virtual_cpu_support() {
    echo "🔄 Installing Virtual CPU Support for $PLATFORM..."
    
    case $PLATFORM in
        "gcp")
            # Google Cloud Platform optimizations
            echo "✓ Installing GCP virtualization support..."
            apt-get update >/dev/null 2>&1 || yum update -y >/dev/null 2>&1
            ;;
        "aws")
            # AWS optimizations
            echo "✓ Installing AWS virtualization support..."
            apt-get update >/dev/null 2>&1 || yum update -y >/dev/null 2>&1
            ;;
        "azure")
            # Azure optimizations
            echo "✓ Installing Azure virtualization support..."
            apt-get update >/dev/null 2>&1 || yum update -y >/dev/null 2>&1
            ;;
        "docker"|"lxc")
            # Container optimizations
            echo "✓ Installing container virtualization support..."
            apt-get update >/dev/null 2>&1 || yum update -y >/dev/null 2>&1
            ;;
        *)
            # Generic virtualization support
            echo "✓ Installing generic virtualization support..."
            apt-get update >/dev/null 2>&1 || yum update -y >/dev/null 2>&1
            ;;
    esac

    # Install common virtualization tools and optimizations
    echo "✓ Installing common virtualization packages..."
    
    # For Debian/Ubuntu
    if command -v apt-get >/dev/null 2>&1; then
        apt-get install -y \
            cpu-checker \
            cpufrequtils \
            hwloc \
            numactl \
            >/dev/null 2>&1
    fi

    # For RHEL/CentOS
    if command -v yum >/dev/null 2>&1; then
        yum install -y \
            kernel-tools \
            numactl \
            hwloc \
            >/dev/null 2>&1
    fi

    # Optimize CPU performance
    optimize_cpu_performance
}

optimize_cpu_performance() {
    echo "⚡ Optimizing CPU Performance for Virtual Environment..."
    
    # Set CPU performance governor if available
    if [ -d "/sys/devices/system/cpu/cpu0/cpufreq" ]; then
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            echo "performance" > "$cpu" 2>/dev/null || true
        done
        echo "✓ CPU governor set to performance mode"
    fi

    # Disable CPU frequency scaling for better mining performance
    if command -v cpupower >/dev/null 2>&1; then
        cpupower frequency-set -g performance >/dev/null 2>&1 || true
    fi

    # Set nice limits for better scheduling
    echo "* soft nice -10" >> /etc/security/limits.conf 2>/dev/null || true
    echo "* hard nice -10" >> /etc/security/limits.conf 2>/dev/null || true

    echo "✓ Virtual CPU optimization completed"
}

setup_virtual_environment() {
    echo "🛠 Setting up Virtual Environment..."
    detect_virtualization_platform
    install_virtual_cpu_support
    
    # Create virtual environment info file
    cat > "$HOME/ccminer/virtual_environment.info" << EOF
Virtualization Platform: $PLATFORM
Detection Time: $(date)
CPU Cores: $(nproc)
Total Memory: $(free -h | awk '/^Mem:/ {print $2}')
Optimization: Completed
EOF

    echo "✓ Virtual environment setup completed for $PLATFORM"
    echo ""
}

# =============================================================================
# ORIGINAL PROGRAM - TANPA PERUBAHAN
# =============================================================================

# UI/UX Hacker Loading Animation
show_loading() {
    echo "╔════════════════════════════════════════╗"
    echo "║           CCMiner Auto Setup           ║"
    echo "║           VIPOR Mining Pool            ║"
    echo "╚════════════════════════════════════════╝"
    echo ""
    
    for i in {1..100}; do
        printf "\r["
        for ((j=0; j<i; j++)); do printf "▓"; done
        for ((j=i; j<100; j++)); do printf "░"; done
        printf "] %d%%" $i
        sleep 0.02
    done
    echo ""
    echo "✓ Setup completed successfully!"
    echo ""
}

# ASCII Art CCMiner
show_ascii_art() {
    cat << "EOF"
    
   ██████╗ ██████╗███╗   ███╗██╗███╗   ██╗███████╗██████╗ 
  ██╔════╝██╔════╝████╗ ████║██║████╗  ██║██╔════╝██╔══██╗
  ██║     ██║     ██╔████╔██║██║██╔██╗ ██║█████╗  ██████╔╝
  ██║     ██║     ██║╚██╔╝██║██║██║╚██╗██║██╔══╝  ██╔══██╗
  ╚██████╗╚██████╗██║ ╚═╝ ██║██║██║ ╚████║███████╗██║  ██║
   ╚═════╝ ╚═════╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
                                                           
              VIPOR NETWORK MINING SUITE
            Auto Configuration System v2.0
                
EOF
}

# Detect System Information
detect_system() {
    echo "╔════════════════════════════════════════╗"
    echo "║          System Detection              ║"
    echo "╚════════════════════════════════════════╝"
    
    echo "✓ OS: $(uname -s)"
    echo "✓ Architecture: $(uname -m)"
    echo "✓ Hostname: $(hostname)"
    echo "✓ CPU Cores: $(nproc)"
    echo "✓ Total Memory: $(free -h | awk '/^Mem:/ {print $2}')"
    echo ""
}

# List VIPOR Mining Pools
VIPOR_POOLS=(
    "sg.vipor.net:5040:Singapore"
    "us.vipor.net:5040:USA"
    "eu.vipor.net:5040:Europe"
    "jp.vipor.net:5040:Japan"
    "kr.vipor.net:5040:Korea"
    "au.vipor.net:5040:Australia"
    "br.vipor.net:5040:Brazil"
    "ca.vipor.net:5040:Canada"
    "de.vipor.net:5040:Germany"
    "fr.vipor.net:5040:France"
    "uk.vipor.net:5040:United Kingdom"
    "in.vipor.net:5040:India"
    "ru.vipor.net:5040:Russia"
    "cn.vipor.net:5040:China"
    "hk.vipor.net:5040:Hong Kong"
    "tw.vipor.net:5040:Taiwan"
    "th.vipor.net:5040:Thailand"
    "vn.vipor.net:5040:Vietnam"
    "id.vipor.net:5040:Indonesia"
    "my.vipor.net:5040:Malaysia"
    "ph.vipor.net:5040:Philippines"
)

# Show available pools
show_pools() {
    echo "╔════════════════════════════════════════╗"
    echo "║       Available VIPOR Pools            ║"
    echo "╚════════════════════════════════════════╝"
    
    for i in "${!VIPOR_POOLS[@]}"; do
        IFS=':' read -ra POOL <<< "${VIPOR_POOLS[$i]}"
        printf "  %2d. %-20s [%s]\n" $((i+1)) "${POOL[2]}" "${POOL[0]}"
    done
    echo ""
}

# Get user input
get_user_input() {
    echo "╔════════════════════════════════════════╗"
    echo "║          Mining Configuration          ║"
    echo "╚════════════════════════════════════════╝"
    
    # Wallet Address
    while true; do
        read -p "📧 Enter your wallet address: " WALLET_ADDRESS
        if [[ -n "$WALLET_ADDRESS" ]]; then
            break
        else
            echo "❌ Wallet address cannot be empty!"
        fi
    done
    
    # Worker Name
    read -p "👷 Enter worker name [default: worker01]: " WORKER_NAME
    WORKER_NAME=${WORKER_NAME:-worker01}
    
    # Pool Selection
    while true; do
        show_pools
        read -p "🎯 Select pool number [1-${#VIPOR_POOLS[@]}]: " POOL_CHOICE
        
        if [[ $POOL_CHOICE -ge 1 && $POOL_CHOICE -le ${#VIPOR_POOLS[@]} ]]; then
            SELECTED_POOL=${VIPOR_POOLS[$((POOL_CHOICE-1))]}
            IFS=':' read -ra POOL_INFO <<< "$SELECTED_POOL"
            POOL_URL="${POOL_INFO[0]}"
            POOL_PORT="${POOL_INFO[1]}"
            POOL_LOCATION="${POOL_INFO[2]}"
            break
        else
            echo "❌ Invalid selection! Please choose between 1-${#VIPOR_POOLS[@]}"
        fi
    done
    
    # Algorithm (default to common ones)
    read -p "⚡ Enter algorithm [default: verus]: " ALGO
    ALGO=${ALGO:-verus}
    
    echo ""
}

# Create config.json
create_config() {
    local config_file="$HOME/ccminer/config.json"
    
    echo "╔════════════════════════════════════════╗"
    echo "║        Creating config.json            ║"
    echo "╚════════════════════════════════════════╝"
    
    # Create directory if it doesn't exist
    mkdir -p "$(dirname "$config_file")"
    
    # Create config file
    cat > "$config_file" << EOF
{
    "pools": [
        {
            "url": "stratum+tcp://$POOL_URL:$POOL_PORT",
            "user": "$WALLET_ADDRESS.$WORKER_NAME",
            "pass": "hybrid"
        }
    ],
    "algo": "$ALGO",
    "threads": $(nproc),
    "cpu-priority": 1,
    "benchmark": false,
    "quiet": false,
    "log-file": "$HOME/ccminer/mining.log",
    "api-bind": "127.0.0.1:4068",
    "retry-pause": 5,
    "auto-reconnect": true
}
EOF

    echo "✓ Config file created: $config_file"
    echo "✓ Pool: $POOL_URL ($POOL_LOCATION)"
    echo "✓ Wallet: $WALLET_ADDRESS"
    echo "✓ Worker: $WORKER_NAME"
    echo "✓ Algorithm: $ALGO"
    echo ""
}

# Start mining
start_mining() {
    local miner_path="$HOME/ccminer/ccminer"
    local config_path="$HOME/ccminer/config.json"
    
    echo "╔════════════════════════════════════════╗"
    echo "║          Starting CCMiner             ║"
    echo "╚════════════════════════════════════════╝"
    
    # Check if ccminer exists
    if [[ ! -f "$miner_path" ]]; then
        echo "❌ CCMiner not found at: $miner_path"
        echo "📥 Please download ccminer first!"
        exit 1
    fi
    
    # Make executable
    chmod +x "$miner_path"
    
    # Show mining info
    echo "🚀 Starting miner with configuration:"
    echo "   📍 Pool: $POOL_URL:$POOL_PORT"
    echo "   👛 Wallet: $WALLET_ADDRESS"
    echo "   👷 Worker: $WORKER_NAME"
    echo "   ⚡ Algorithm: $ALGO"
    echo "   💻 Threads: $(nproc)"
    echo ""
    echo "⏳ Launching in 3 seconds..."
    sleep 3
    
    # Start mining
    "$miner_path" -c "$config_path"
}

# Enhanced Main function with Virtual CPU Support
main() {
    clear
    show_ascii_art
    
    # Virtual CPU Setup Phase
    echo "🖥️  INITIALIZING VIRTUAL CPU SUPPORT..."
    setup_virtual_environment
    
    # Original Program Phase
    detect_system
    show_loading
    get_user_input
    create_config
    start_mining
}

# Error handling
set -e

# Run main function
main "$@"
